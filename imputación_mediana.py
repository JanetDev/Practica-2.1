# -*- coding: utf-8 -*-
"""imputación.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jxBBav0JjQXr9D6gZDJM8FWfq7k1Ip-L
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import csv
from google.colab import drive
drive.mount('/content/drive')

archivoCSV= "/content/drive/MyDrive/Titanic.csv"
df = pd.read_csv(archivoCSV)
df

total= len(df['Age'])
nulos = df['Age'].isnull().sum()
porcentaje = (nulos / total) * 100
print(f"Porcentaje de valores nulos en la columna 'Age': {porcentaje:.2f}%")

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

#método de clasificaciíon de bosques aleatorios
#antes del preprocesamiento
X = df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']].copy()
y = df['Survived'].copy()

#eliminar filas con valores nulos
X = X.dropna()
y = y[X.index]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)

y_pred = rf_classifier.predict(X_test)

#calcular la precisión del modelo
accuracy = accuracy_score(y_test, y_pred)
print(f'Precisión antes del preprocesamiento: {accuracy}')

import matplotlib.pyplot as plt

#cuartiles
orden = sorted(df['Age'].dropna())
n = len(orden)
q1 = orden[int(n * 0.25)]
q3 = orden[int(n * 0.75)]
iqr = q3 - q1
li = q1 - 1.5 * iqr
ls = q3 + 1.5 * iqr

# Imputar mediana
for i, age in enumerate(df['Age']):
    if pd.isnull(age) or age < li or age > ls:
        df.at[i, 'Age'] = (q1 + q3) / 2


#graficas

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
ax1.hist(orden, bins=20, color='blue', alpha=0.7, label='Original')
ax1.set_title('Distribución de Age (original)')
ax1.legend()

ax2.hist(df['Age'], bins=20, color='red', alpha=0.7, label='Imputada')
ax2.set_title('Distribución de Age (imputación)')
ax2.legend()

plt.tight_layout()

plt.show()

total= len(df['Age'])
nulos = df['Age'].isnull().sum()
porcentaje = (nulos / total) * 100
print(f"Porcentaje de valores nulos en la columna 'Age': {porcentaje:.2f}%")

X = df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']].copy()
y = df['Survived'].copy()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)


y_pred = rf_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Precisión después del preprocesamiento: {accuracy}')
